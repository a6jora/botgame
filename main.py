import json
import random
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_STEPS = random.randint(7, 10)
EVENTS_FILE = 'events.json'
TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
    events_data = json.load(f)


class GameState:
    def __init__(self):
        self.user_states = {}

    def init_user(self, user_id):
        self.user_states[user_id] = {
            'hp': 5,
            'step': 0,
            'message_history': [],
            'last_played': datetime.now().strftime('%Y-%m-%d')
        }

    def delete_progress(self, user_id):
        if user_id in self.user_states:
            del self.user_states[user_id]


game_state = GameState()


async def delete_messages(update: Update, context: CallbackContext, user_id):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤ message_history.
    """
    if user_id in game_state.user_states:
        for msg_id in game_state.user_states[user_id]['message_history']:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"Error deleting message: {e}")
        game_state.user_states[user_id]['message_history'] = []


def get_promo_code():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ promos.txt –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
    –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    try:
        with open('promos.txt', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        if not lines:
            return None  # –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        promo = lines[0].strip()
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open('promos.txt', 'w', encoding='utf-8') as f:
            f.writelines(lines[1:])
        return promo
    except FileNotFoundError:
        return None


async def start(update: Update, context: CallbackContext):
    """
    –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞.
    """
    user_id = update.effective_user.id
    await delete_messages(update, context, user_id)

    game_state.init_user(user_id)

    msg = await update.message.reply_text(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç –°–º–µ—Ä—Ç–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å:",
        reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –õ–µ–≤–æ', '‚û°Ô∏è –ü—Ä–∞–≤–æ']], one_time_keyboard=True)
    )
    game_state.user_states[user_id]['message_history'].append(msg.message_id)


async def handle_choice(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ (–ª–µ–≤–æ/–ø—Ä–∞–≤–æ) –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.
    """
    user_id = update.effective_user.id
    state = game_state.user_states.get(user_id)

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ
    if not state:
        await start(update, context)
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —à–∞–≥–æ–≤
    state['step'] += 1
    is_final = state['step'] >= MAX_STEPS

    # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª, –≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–∏ boss/exit, –∏–Ω–∞—á–µ ‚Äî —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if is_final:
        possible_events = [e for e in events_data['events'] if e['type'] in ('boss', 'exit')]
    else:
        possible_events = [e for e in events_data['events'] if e['type'] not in ('boss', 'exit')]

    if not possible_events:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ events.json –∫–∞–∫-—Ç–æ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª events.json.")
        return

    event = random.choice(possible_events)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    if event['type'] in ('battle', 'trap'):
        state['hp'] -= 1
    elif event['type'] in ('rest', 'treasure'):
        state['hp'] += 1
    elif event['type'] == 'miniboss':
        state['hp'] -= 2
    elif event['type'] == 'boss':
        state['hp'] -= 3
    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text_message = (
        f"üï≥ –®–∞–≥ {state['step']}\n\n"
        f"{event['story']}\n\n"
        f"{event['description']}\n\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {state['hp']}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–±—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if "image" in event and event["image"]:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        image_path = os.path.join("images", event["image"])
        if os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            msg = await update.message.reply_photo(
                photo=open(image_path, 'rb'),
                caption=text_message,
                reply_markup=ReplyKeyboardMarkup(
                    ([['‚¨ÖÔ∏è –õ–µ–≤–æ', '‚û°Ô∏è –ü—Ä–∞–≤–æ']] if not is_final else [['üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]),
                    one_time_keyboard=True
                )
            )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —à–ª—ë–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await update.message.reply_text(
                text_message,
                reply_markup=ReplyKeyboardMarkup(
                    ([['‚¨ÖÔ∏è –õ–µ–≤–æ', '‚û°Ô∏è –ü—Ä–∞–≤–æ']] if not is_final else [['üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]),
                    one_time_keyboard=True
                )
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è image ‚Äî –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await update.message.reply_text(
            text_message,
            reply_markup=ReplyKeyboardMarkup(
                ([['‚¨ÖÔ∏è –õ–µ–≤–æ', '‚û°Ô∏è –ü—Ä–∞–≤–æ']] if not is_final else [['üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]),
                one_time_keyboard=True
            )
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    game_state.user_states[user_id]['message_history'].append(msg.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if state['hp'] <= 0 or is_final:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_messages(update, context, user_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HP –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–∏–Ω–∞—á–µ state –ø—Ä–æ–ø–∞–¥—ë—Ç)
        hp_final = state['hp']
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
        game_state.delete_progress(user_id)

        if hp_final <= 0:
            # –ü—Ä–æ–∏–≥—Ä—ã—à
            result_text = "üíÄ –í—ã –ø–∞–ª–∏ –≤ –±–æ—é!\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?"
        else:
            # –í—ã–∏–≥—Ä—ã—à
            result_text = "üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤—ã—Ö–æ–¥–∞!\n"

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
            promo = get_promo_code()
            if promo:
                result_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏! –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:\n{promo}\n\n"
            else:
                result_text += "–ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"

            result_text += "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?"

        final_msg = await update.message.reply_text(
            result_text,
            reply_markup=ReplyKeyboardMarkup([['üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']], one_time_keyboard=True)
        )
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        game_state.user_states[user_id] = {'message_history': [final_msg.message_id]}


def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    app.add_handler(CommandHandler("start", start))
    # –õ—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —è–≤–ª—è—é—â–µ–µ—Å—è –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –≤—ã–±–æ—Ä –ø—É—Ç–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()


if __name__ == '__main__':
    main()
